<details>

<summary>You are about to sign a contract with energy. Click here to expand the details.</summary>

### Terms and Conditions

The following seahorse code snippet is the part of the contract that you are about to sign.

#### Source Code

You provision enough energy, we consume it to generate you an answer.

At the end of the process, the rest of the energy in provision that was not consumed is restituted to your account.

##### Provision

To send a message, you need to provision your Metabolizer account with energy upto the maximum context window size of the model(s) use for the transaction.

```python
# Deposit energy provision to Singularity
@instruction
def provision(
  metabolizer: Metabolizer,
  # transformer: Transformer,
  metabolizer_account: TokenAccount, 
  singularity_account: TokenAccount,
  metabolizer_signer: Signer,
  n: u64
  ):
  # Metabolizer sends the energy provision to the Singularity account
  metabolizer_account.transfer(
    authority = metabolizer_signer,
    to = singularity_account,
    amount = u64(n)
  )
  metabolizer.reserve += n
```

##### Consumption

With your Metabolizer account provisioned, we can now consume your provision on your behalf to generate the tokens to answer your query.

```python
# Consume provision from Singularity
@instruction
def consume(
  signer: Signer,
  mint: TokenMint,
  transformer_account: TokenAccount,
  metabolizer_account: TokenAccount,
  singularity_account: TokenAccount, 
  singularity: Singularity,
  n: u64,
  transformer: Transformer,
  metabolizer: Metabolizer,
  clock: Clock
  ):
  assert mint.key() == singularity.mint, 'The Token mint you are trying to consume does not match the singularity\'s mint'
  assert transformer_account.mint() == mint.key(), 'The Token account you are trying to consume does not match the transformer\'s mint'
  assert metabolizer_account.mint() == mint.key(), 'The Token account you are trying to consume does not match the metabolizer\'s mint'
  assert singularity_account.mint() == mint.key(), 'The Token account you are trying to consume does not match the singularity\'s mint'
  
  assert transformer.owner == transformer_account.key(), 'The Transformer account you are trying to consume from does not match the transformer\'s owner'
  assert metabolizer.owner == metabolizer_account.key(), 'The Metabolizer account you are trying to consume from does not match the metabolizer\'s owner'
  
  assert n > 0, 'You must consume at least 1 unit of energy provision.'
  assert metabolizer.reserve >= n, 'The Metabolizer account does not have enough energy provision to consume.'
  assert singularity.energy_supply >= n, 'The Singularity account does not have enough energy supply to consume.'
  assert singularity_account.amount() >= n, 'The Singularity account does not have enough energy supply to consume.'
  
  timestamp:  i64 = clock.unix_timestamp()
  assert timestamp - 3 > metabolizer.last_exchange, 'Your transaction has been rate limited, please try again in 3 seconds.'

  # Update amount of token generated by the transformer
  transformer.vec_unit_gen += n
  # Update the reserved amount of energy provisioned by the metabolizer
  metabolizer.reserve -= n
  
  # Update stats of the Singularity account
  singularity.bump_query += 1
  singularity.bump_token += n
  singularity.profit += n * singularity.fee // 100
  
  # Send part of the provision for the generated tokens
  amount = (n * (100 - singularity.fee) // 100)  
  singularity_account.transfer(
    authority = signer,
    to = transformer_account,
    amount = amount,
    signer = ['energy-conversion', mint, transformer_account, timestamp]
  )
  
  # Send the rest of the provision to the Metabolizer account
  rem = metabolizer.reserve
  singularity_account.transfer(
      authority = signer,
      to = metabolizer_account,
      amount = rem,
      signer = ['energy-conversion', mint, metabolizer_account, timestamp]
  )
  
  # Close the transaction
  metabolizer.reserve = 0
  metabolizer.last_exchange = timestamp
```

We'll pay the provider and take a fee on the generated tokens to cover the cost of the computation. At the end, we restitute the remainder of the energy provision back to your account.

If you understand and agree to the terms and conditions, please ensure you have enough energy on your account to create a provision, write a message and it `Enter` (or click the `Send` button).
</details>
